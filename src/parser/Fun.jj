/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  STATIC = false; // permite mais de um AL e AS, o que da flexibilidade
}

PARSER_BEGIN(Fun)
package parser;
  import java.io.*;

public class Fun{
  
  final static String Version = "Fun compiler - version 1.0";
  boolean Menosshort = false; //saida resumida = falso

  public static void main(String args []) throws ParseException {
    String filename = ""; // nome do arquivo analisado
    Fun parser; // analisador lexico
    int i;
    boolean ms = false;
    
    System.out.println(Version); //le os parametros passados para o compilador

    for (i=0; i<args.length - 1; i++)
    {
      if( args[i].toLowerCase().equals("-short") )
      	ms = true;
      else
      {
		System.out.println("inputfile");
		System.exit(0);
      }
  	}

  	if (args[i].equals("-"))
  	{ 	//le da entrada padrao
      System.out.println("Reading from standard input...");
      parser = new Fun(System.in);
  	}
  	else
  	{	// le do arquivo
		filename = args[args.length-1];
		System.out.println("Reading from file " + filename);
		try {
		  parser = new Fun(new java.io.FileInputStream(filename));
		}
		catch (java.io.FileNotFoundException e) {
		  System.out.println("File not found");
		  return;
		}
  	}
  	parser.Menosshort = ms;
  	parser.program(); //chama metodo que faz analise

  	//verifica se houve erro lexico

  if (parser.token_source.foundLexError() != 0 )
  	System.out.println( parser.token_source.foundLexError() + " Lexical errors found");

  else
  	System.out.println("Program successfully analized.");
} // main

static public String im(int x) //metodo auxiliar
{
  int k;
  String s;
  	s = tokenImage[x];
  	k = s.lastIndexOf("\"");
  	try { s=s.substring(1,k); }
  	catch (StringIndexOutOfBoundsException e)
  	{ }
  	return s;
 }

} //FUN


PARSER_END(Fun)

TOKEN_MGR_DECLS :
{
  int countLexError = 0;

  public int foundLexError() {
    return countLexError;
  }

}

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "\f"
}

TOKEN : /* Palavras Reservadas */
{
< ASSIGN: "=" >
| < BREAK: "break" >
| < CLASS: "class" >
| < CONSTRUCTOR: "constructor" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FOR: "for" >
| < IF: "if" >
| < INT: "int" >
| < NEW: "new" >
| < PRINT: "print" >
| < READ: "read" >
| < RETURN: "return" >
| < STRING: "string" >
| < SUPER: "super" >
}


TOKEN : /* Operadores */
{
  < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < MULTIPLY: "*" >
| < DIVIDE: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}

TOKEN : /* Operadores */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

TOKEN : /* Constantes*/
{
  < int_constant: (
    (["0"-"9"] (["0"-"9"])* ) |
	(["0"-"7"] (["0"-"7"])* ["o", "O"] ) |
	(["0"-"9"] (["0"-"7","A"-"F","a"-"f"])* ["h", "H"] ) |
	(["0"-"1"] (["0"-"1"])* ["b","B"])
   ) >
|
	<  string_constant:		//constante string como "abcd"
		"\""( ~ ["\"","n", "\r"])* "\"" >
}

TOKEN : /* identificadores*/
{
  < INDENT: < LETTER > (< LETTER >|< DIGIT >)* >
|
  < #LETTER:["A"-"Z","a"-"z"] >
|
  < #DIGIT:["0"-"9"] >
}


SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}


TOKEN : /* LITERALS */
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
| < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

void program() :
{}
{
  (
    <PLUS> { System.out.println("Reconheceu PLUS"); } 
  | <MINUS> { System.out.println("Reconheceu MINUS"); } 
  | <MULTIPLY> { System.out.println("Reconheceu MULTIPLY"); } 
  | <DIVIDE> { System.out.println("Reconheceu DIVIDE"); }  
  )*
} 

void BooleanLiteral() :
{}
{
  "true"
|
  "false"

