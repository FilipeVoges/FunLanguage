/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Fun)
package parser;

public class Fun{
final static string Version = "Fun compiler - version 1.0";
boolean Menosshort = false; //saida resumida

  public static void main(String args []) throws ParseException {
    String filename = ""; // nome do arquiva analisado
    Fun parser = new Fun(System.in); // analisador lexico
    int i;
    boolean ms = false;
    
    System.out.println(Version); //le os parametros passados para o compilador
    
    for ( i = 0; i < args.lenght - 1; i++){
      if(args[i].toLowerCase().equals("-short"))
        ms = true;
      else{
        System.out.println("Usage is: java Fun [-short] inputfile");
        System.exit(0);
      }
    }
    
    if(args[i].equals("-"){ //le da entrada-padrao
      System.out.println("Reading from standard input ...");
      parser = new Fun(System.in);
     else{ //le do arquivo
      filename = args[args.length-1];
      System.out.println("Reading from file " + filename + " ..");
      try{
        parser = new Fun(new java.oi.FileInputStream (filename));
      }
      catch (java.oi.FileNotFoundExpection e) {
        System.out.println("File" + filename + "not found.");
        return;
      }
    }
    parser.Menosshort = ms;
    parser.program(); // chama o metodo q faz a analise
    
    //verifica se houve erro lexico
    if(parser.token_source.foundLexError() != 0 )
      System.out.println(parser.token_source.foundLexError() + "Lexical erros found");
     else
      System.out.println("Program successfully analized.")
   } //main
   
   
   static public String im (int x){
   //metodo auxiliar
   int k; String s;
    s = tokenImage[x];
    k = s.lastIndexOf(("\");
    try {s = s.substring(1,k);}
    catch (StringIndexOutOfBoundsException e )
    {}
    return s;
    }
    
    } //Fun
    
    PARSER_END(Fun)
  
  
     
    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
      try
      {
        switch (Fun.one_line())
        {
          case 0 : 
          System.out.println("OK.");
          break;
          case 1 : 
          System.out.println("Goodbye.");
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Fun.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }
}

PARSER_END(Fun)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
}

TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}

int one_line() :
{}
{
  sum() ";"
  {
    return 0;
  }
| ";"
  {
    return 1;
  }
}

void sum() :
{}
{
  term()
  (
    (
      < PLUS >
    | < MINUS >
    )
    term()
  )*
}

void term() :
{}
{
  unary()
  (
    (
      < MULTIPLY >
    | < DIVIDE >
    )
    unary()
  )*
}

void unary() :
{}
{
  < MINUS > element()
| element()
}

void element() :
{}
{
  < CONSTANT >
| "(" sum() ")"
}
